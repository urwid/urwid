name: Python package

on:
  push:
    branches-ignore:
      - 'dependabot/**'
  pull_request: {}

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 6
      matrix:
        os: [ "ubuntu-latest" ]  # , "macos-latest", "windows-latest"   # enable windows after Windows driver will be added
        python-version: [ "3.7", "3.8", "3.9", "3.10", "3.11" ]

    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0  # need for setuptools_scm
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.6.1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r test_requirements.txt
      - name: Install package for test
        run: pip install -e .
      - name: Test
        run: |
          coverage run -m unittest discover -s urwid -v
          coverage report
          coverage xml
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: run-${{ matrix.python-version }}-${{ matrix.os }}"
          parallel: true
          file: coverage.xml

  UploadCoverage:
    name: Upload coverage to Coveralls
    needs: [ Test ]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [ Test ]
    # build only on push: heavy job
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "macos-latest" ]

    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0  # need for setuptools_scm

      # Used to host cibuildwheel
      - uses: actions/setup-python@v4.6.1
        with:
          python-version: "3.11"

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.13.1
        env:
          # configure cibuildwheel to build native archs ('auto'), and some
          # emulated ones
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_ARCHS_MACOS: x86_64 universal2 arm64

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    needs: [ Test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0  # need for setuptools_scm

      - uses: actions/setup-python@v4.6.1
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -U twine build

      - name: Build sdist
        run:  python -m build -s

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [ build_wheels, build_sdist ]
    # upload to PyPI on every tag
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.8.6
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/