[build-system]
# Minimum requirements for the build system to execute.
# PEP 508 specifications for PEP 518.
requires = [
    "setuptools >= 61.0.0",
    "setuptools_scm[toml]>=6.2",
    "wheel",
]
build-backend="setuptools.build_meta"

[project]
name = "urwid"
description = "A full-featured console (xterm et al.) user interface library"
requires-python = ">=3.7.0"
keywords = ["curses", "ui", "widget", "scroll", "listbox", "user interface", "text layout", "console", "ncurses"]
license={text="LGPL-2.1-only"}  # Use SPDX classifier
readme = {file = "README.rst", content-type = "text/x-rst"}
authors=[{name="Ian Ward", email="ian@excess.org"}]
dynamic = ["classifiers", "version"]  # "dependencies",

[project.urls]
"Homepage" = "https://urwid.org/"
"Documentation" = "https://urwid.org/manual/index.html"
"Repository" = "https://github.com/urwid/urwid"
"Bug Tracker" = "https://github.com/urwid/urwid/issues"

[tool.setuptools]
platforms=["unix-like"]
zip-safe = false

[tool.setuptools.packages.find]
exclude = [
  "doc",
  "docs",
  "examples",
  "test",
  "tests",
  "bin",
  ".*"
]
namespaces = false

[tool.setuptools.dynamic]
#dependencies = {file = ["requirements.txt"]}
classifiers = {file = ["classifiers.txt"]}

[project.optional-dependencies]
glib = ["PyGObject"]
tornado = ["tornado"]
trio = ["trio"]
twisted = ["twisted"]
zmq = ["zmq"]
# for lcd_display
serial = ["pyserial"]
lcd = ["pyserial"]

[tool.distutils.bdist_wheel]
universal = 0

[tool.setuptools_scm]
write_to = "urwid/version.py"

[tool.cibuildwheel]
# Disable building PyPy wheels on all platforms
# Disable musllinux as not popular platform
skip = ["pp*", "*-musllinux_*"]

[tool.isort]
profile = "black"
line_length = 120

[tool.black]
line-length = 120
safe = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vvvv --doctest-modules -s --cov=urwid"
doctest_optionflags = ["ELLIPSIS", "IGNORE_EXCEPTION_DETAIL"]
testpaths = ["urwid"]

[tool.coverage.run]
omit = ["tests/*", ".tox/*", "setup.py"]
branch = true

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",

  # Don't complain if tests don't hit defensive assertion code:
  "raise NotImplementedError",

  # Exclude methods marked as abstract
  "@abstractmethod",

  # Exclude import statements
  "^from\b",
  "^import\b",

  # Exclude variable declarations that are executed when file is loaded
  "^[a-zA-Z_]+\b\\s=",

  # Code for static analysis is never covered:
  "if typing.TYPE_CHECKING:",

  # Fallback code with no installed deps is almost impossible to cover properly
  "except ImportError:",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # OS Specific
  "if platform.system()",
]

[tool.mypy]
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
  "gi.*",
  "trio.*",
  "serial.*"
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
show-source = true
target-version = "py37"
ignore-init-module-imports = true

extend-select = [
  "W",  # also pycodestyle warnings
  "PYI",  # flake8-pyi
  "ASYNC",  # flake8-async
  "FA",  # from __future__ import annotations
  "SLOT",  # flake8-slots
  "TCH",  # flake8-type-checking
  "S",  # flake8-bandit
  "A",  # flake8-builtins
  "B", "T10", "EXE",  # flake8-bugbear, flake8-debugger, flake8-executable
  "ISC",  # flake8-implicit-str-concat
  "RET", "SIM", "C4",  # flake8-return, flake8-simplify, flake8-comprehensions
  "ICN", "PGH",  # flake8-import-conventions, pygrep-hooks
  "Q",  # quotes
  "FLY",  # Flynt
  "TRY", "UP", "I", "PL", "PERF", "RUF",  # tryceratops, pyupgrade, isort, pylint + perflint, Ruff-specific
]
extend-ignore = [
  "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PLR2004",  # refactor rules (too many statements/arguments/branches)
  "RET504",  # Unnecessary variable assignment before return statement
  "SIM108",  # Use ternary operator,
  "TRY003",  #long messages prepare outside, ...
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "SIM105"]

[tool.ruff.isort]
known-third-party = []

[tool.ruff.pydocstyle]
convention = "pep257"
